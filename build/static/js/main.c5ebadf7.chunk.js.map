{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","Component","constructor","props","super","this","handleClick","bind","evt","flipCellsAroundMe","render","classes","isLit","className","onClick","Board","state","hasWon","board","createBoard","y","nRows","row","x","nCols","push","Math","random","chanceLightStartsOn","flipCellsAround","coord","split","map","Number","flipCell","every","cell","setState","tblBoard","key","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wSAiBA,MAAMA,UAAaC,YACjBC,YAAYC,GACVC,MAAMD,GACNE,KAAKC,YAAcD,KAAKC,YAAYC,KAAKF,MAG3CC,YAAYE,GAEVH,KAAKF,MAAMM,oBAGbC,SACE,IAAIC,EAAU,QAAUN,KAAKF,MAAMS,MAAQ,YAAc,IAEzD,OACI,wBAAIC,UAAWF,EAASG,QAAST,KAAKC,eAM/BN,Q,MCPf,MAAMe,UAAcd,YAMlBC,YAAYC,GACVC,MAAMD,GACNE,KAAKW,MAAQ,CACXC,QAAQ,EACRC,MAAOb,KAAKc,eAOhBA,cACE,IAAID,EAAQ,GAEZ,IAAK,IAAIE,EAAI,EAAGA,EAAIf,KAAKF,MAAMkB,MAAOD,IAAK,CACzC,IAAIE,EAAM,GACV,IAAK,IAAIC,EAAI,EAAGA,EAAIlB,KAAKF,MAAMqB,MAAOD,IACpCD,EAAIG,KAAKC,KAAKC,SAAWtB,KAAKF,MAAMyB,qBAEtCV,EAAMO,KAAKH,GAEb,OAAOJ,EAKTW,gBAAgBC,GAAQ,IAAD,EACAzB,KAAKF,MAArBqB,EADgB,EAChBA,MAAOH,EADS,EACTA,MACRH,EAAQb,KAAKW,MAAME,MAFF,EAGRY,EAAMC,MAAM,KAAKC,IAAIC,QAHb,mBAGhBb,EAHgB,KAGbG,EAHa,KAMrB,SAASW,EAASd,EAAGG,GAGfA,GAAK,GAAKA,EAAIC,GAASJ,GAAK,GAAKA,EAAIC,IACvCH,EAAME,GAAGG,IAAML,EAAME,GAAGG,IAG5BW,EAASd,EAAEG,GACXW,EAASd,EAAGG,EAAI,GAChBW,EAASd,EAAGG,EAAI,GAChBW,EAASd,EAAI,EAAGG,GAChBW,EAASd,EAAI,EAAGG,GAMhB,IAAIN,EAASC,EAAMiB,MAAMb,GAAOA,EAAIa,MAAMC,IAASA,IAEnD/B,KAAKgC,SAAS,CAACnB,MAAMA,EAAOD,OAAOA,IAMrCP,SACE,GAAIL,KAAKW,MAAMC,OACb,OACA,yBAAKJ,UAAU,cACb,yBAAKA,UAAU,UACb,0BAAMA,UAAU,cAAhB,OACA,0BAAMA,UAAU,YAAhB,UAaN,IAAIyB,EAAW,GACf,IAAK,IAAIlB,EAAI,EAAGA,EAAIf,KAAKF,MAAMkB,MAAOD,IAAK,CACzC,IAAIE,EAAM,GACV,IAAK,IAAIC,EAAI,EAAGA,EAAIlB,KAAKF,MAAMqB,MAAOD,IAAK,CACzC,IAAIO,EAAK,UAAMV,EAAN,YAAWG,GACpBD,EAAIG,KAAK,kBAAC,EAAD,CAAMc,IAAKT,EAAOlB,MAAOP,KAAKW,MAAME,MAAME,GAAGG,GACpDd,kBAAmB,IAAMJ,KAAKwB,gBAAgBC,MAGlDQ,EAASb,KAAK,4BAAKH,IAGrB,OACE,6BACE,yBAAKT,UAAU,cACb,yBAAKA,UAAU,cAAf,UACA,yBAAKA,UAAU,YAAf,SAEF,2BAAOA,UAAU,SACf,+BACGyB,MAtGPvB,EACGyB,aAAe,CACpBnB,MAAO,EACPG,MAAO,EACPI,oBAAqB,KA2GVb,Q,MCxIf,MAAM0B,UAAYxC,YAChBS,SACE,OACE,yBAAKG,UAAU,OACb,kBAAC,EAAD,QAMO4B,QCJKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASrC,OAAO,kBAAC,EAAD,MAASsC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAKC,IACjCA,EAAaC,iB","file":"static/js/main.c5ebadf7.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe();\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell;","import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nRows: number of rows of board\n * - nCols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nRows: 5,\n    nCols: 5,\n    chanceLightStartsOn: 0.25\n  };\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    };\n    // TODO: set initial state\n  }\n\n  /** create a board nRows high/nCols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let y = 0; y < this.props.nRows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.nCols; x++) {\n        row.push(Math.random() < this.props.chanceLightStartsOn)\n      }\n      board.push(row);\n    }\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {nCols, nRows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < nCols && y >= 0 && y < nRows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    flipCell(y,x);\n    flipCell(y, x - 1);\n    flipCell(y, x + 1);\n    flipCell(y - 1, x);\n    flipCell(y + 1, x);\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let hasWon = board.every(row => row.every(cell => !cell));\n\n    this.setState({board:board, hasWon:hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    if (this.state.hasWon) {\n      return (\n      <div className='boardTitle'>\n        <div className='winner'>\n          <span className=\"neonOrange\">YOU</span>\n          <span className=\"neonBlue\">WON!</span>\n        </div>\n      </div>\n      );\n    }\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n    let tblBoard = [];\n    for (let y = 0; y < this.props.nRows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.nCols; x++) {\n        let coord = `${y}-${x}`;\n        row.push(<Cell key={coord} isLit={this.state.board[y][x]}\n          flipCellsAroundMe={() => this.flipCellsAround(coord)}\n        />)\n      }\n      tblBoard.push(<tr>{row}</tr>)\n    }\n\n    return (\n      <div>\n        <div className='boardTitle'>\n          <div className=\"neonOrange\">Lights</div>\n          <div className=\"neonBlue\">Out!</div>\n        </div>\n        <table className='Board'>\n          <tbody>\n            {tblBoard}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\n\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}